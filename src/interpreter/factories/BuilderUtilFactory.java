// This entire file is part of my masterpiece.
// Maddie Briere

package interpreter.factories;

import interpreter.builders.BuilderUtil;
import interpreter.misc.InstructionNode;

/**
 * This class extends the AbstractFactory class with a type BuilderUtil.
 * 
 * This factory class creates BuilderUtil objects for use in the creation of
 * instruction trees.
 * 
 * Some notes:
 * 
 * 1) This factory, unlike some of the others, just returns null when it fails.
 * This triggers the use of default parsing and allows the program to continue
 * without the user needing to be alerted of behind-the-scenes action.
 * 
 * 2) The String passed to the super constructor is built similarly for any
 * instruction type, allowing for a generic check for the Util class without
 * special treatment.
 * 
 * 3) This class is super short, but incredibly useful :) It helps us avoid MANY
 * if statements.
 * 
 * @author maddiebriere
 *
 */

public class BuilderUtilFactory extends AbstractFactory<BuilderUtil> {

	private static final String PATH = "interpreter.builders.";

	public BuilderUtilFactory() {
		super(PATH);
	}

	/**
	 * Returning a null object trigger the default parsing instead of parsing
	 * via a BuilderUtil object
	 */
	@Override
	public BuilderUtil failResponse() {
		return null;
	}

	/**
	 * BuilderUtil names are generated by tacking on the String "Util" 
	 * 
	 * Example:
	 * "GroupStart" --> "GroupStartUtil"
	 */
	@Override
	public String generateObjectType(String name) {
		return name + "Util";
	}

}
